diff --git a/http.go b/http.go
index c246f5f..01d5af5 100644
--- a/http.go
+++ b/http.go
@@ -14,13 +14,16 @@
 package main
 
 import (
+	"crypto/tls"
 	"errors"
 	"fmt"
 	"io"
 	"io/ioutil"
+	"net"
 	"net/http"
 	"regexp"
 	"strings"
+	"time"
 
 	"github.com/prometheus/common/log"
 )
@@ -58,9 +61,20 @@ func probeHTTP(target string, w http.ResponseWriter, module Module) (success boo
 	var isSSL, redirects int
 	config := module.HTTP
 
+	transport := &http.Transport{
+		Proxy: http.ProxyFromEnvironment,
+		Dial: (&net.Dialer{
+			Timeout:   30 * time.Second,
+			KeepAlive: 30 * time.Second,
+		}).Dial,
+		TLSHandshakeTimeout:   10 * time.Second,
+		ExpectContinueTimeout: 1 * time.Second,
+	}
 	client := &http.Client{
-		Timeout: module.Timeout,
+		Timeout:   module.Timeout,
+		Transport: transport,
 	}
+	defer transport.CloseIdleConnections()
 
 	client.CheckRedirect = func(_ *http.Request, via []*http.Request) error {
 		redirects = len(via)
@@ -82,10 +96,15 @@ func probeHTTP(target string, w http.ResponseWriter, module Module) (success boo
 		log.Errorf("Error creating request for target %s: %s", target, err)
 		return
 	}
+	defer transport.CancelRequest(request)
 
 	for key, value := range config.Headers {
 		if strings.Title(key) == "Host" {
 			request.Host = value
+			if transport.TLSClientConfig == nil {
+				transport.TLSClientConfig = &tls.Config{}
+			}
+			transport.TLSClientConfig.ServerName = value
 			continue
 		}
 		request.Header.Set(key, value)
